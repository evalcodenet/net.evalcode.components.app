<?xml version="1.0" encoding="utf-8"?>
<ruleset name="Design Rules" xmlns="http://pmd.sf.net/ruleset/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
  xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">

  <description>The Code Size Ruleset contains a collection of rules that find software design related problems.</description>

  <rule name="ExitExpression" since="0.2" message="The {0} {1}() contains an exit expression." class="PHP_PMD_Rule_Design_ExitExpression"
    externalInfoUrl="http://phpmd.org/rules/design.html#exitexpression">
    <description>
      An exit-expression within regular code is untestable and therefore it should
      be avoided. Consider to move the exit-expression into some kind of startup
      script where an error/exception code is returned to the calling environment.
    </description>
    <priority>1</priority>
    <example><![CDATA[
  class Foo
  {
    public function bar($param_)
    {
      if(42===$param_)
        exit(23);
    }
  }]]>
    </example>
  </rule>

  <rule name="EvalExpression" since="0.2" message="The {0} {1}() contains an eval expression." class="PHP_PMD_Rule_Design_EvalExpression"
    externalInfoUrl="http://phpmd.org/rules/design.html#evalexpression">
    <description>
      An eval-expression is untestable, a security risk and bad practice. Therefore
      it should be avoided. Consider to replace the eval-expression with regular
      code.
    </description>
    <priority>1</priority>
    <example><![CDATA[
  class Foo
  {
    public function bar($param_)
    {
      if(42===$param_)
        eval('$param=23;');
    }
  }]]>
    </example>
  </rule>

  <rule name="GotoStatement" since="1.1.0" message="The {0} {1}() utilizes a goto statement." class="PHP_PMD_Rule_Design_GotoStatement"
    externalInfoUrl="http://phpmd.org/rules/design.html#gotostatement">
    <description>
      Goto makes code harder to read and it is nearly impossible to understand the
      control flow of an application that uses this language construct. Therefore it
      should be avoided. Consider to replace Goto with regular control structures and
      separate methods/function, which are easier to read.
    </description>
    <priority>1</priority>
    <example><![CDATA[
  class Foo
  {
    public function bar($param_)
    {
      A:
        if(42===$param_)
          goto X;
      Y:
        if(23===time()%42)
          goto Z;
      X:
        if(42===time()%23)
          goto Y;
      Z:
        return 42;
    }
  }]]>
    </example>
  </rule>

  <rule name="NumberOfChildren" since="0.2"
    message="The {0} {1} has {2} children. Consider to rebalance this class hierarchy to keep number of children under {3}."
    class="PHP_PMD_Rule_Design_NumberOfChildren" externalInfoUrl="http://phpmd.org/rules/design.html#numberofchildren">
    <description>
      A class with an excessive number of children is an indicator for an unbalanced
      class hierarchy. You should consider to refactor this class hierarchy.
    </description>
    <priority>2</priority>
    <properties>
      <property name="minimum" value="15" description="Maximum number of acceptable child classes." />
    </properties>
  </rule>

  <rule name="DepthOfInheritance" since="0.2"
    message="The {0} {1} has {2} parents. Consider to reduce the depth of this class hierarchy to under {3}." class="PHP_PMD_Rule_Design_DepthOfInheritance"
    externalInfoUrl="http://phpmd.org/rules/design.html#depthofinheritance">
    <description>
      A class with many parents is an indicator for an unbalanced and wrong class
      hierarchy. You should consider to refactor this class hierarchy.
    </description>
    <priority>2</priority>
    <properties>
      <property name="minimum" value="6" description="Maximum number of acceptable parent classes." />
    </properties>
  </rule>

  <rule name="CouplingBetweenObjects" since="1.1.0"
    message="The class {0} has a coupling between objects value of {1}. Consider to reduce the number of dependencies under {2}."
    class="PHP_PMD_Rule_Design_CouplingBetweenObjects" externalInfoUrl="http://phpmd.org/rules/design.html#couplingbetweenobjects">
    <description>
      A class with to many dependencies has negative impacts on several quality
      aspects of a class. This includes quality criterias like stability,
      maintainability and understandability
    </description>
    <priority>2</priority>
    <properties>
      <property name="minimum" value="13" description="Maximum number of acceptable dependencies." />
    </properties>
    <example><![CDATA[
  class Foo
  {
    /**
     * @var \foo\bar\X
     */
    private $m_x=null;

    /**
     * @var \foo\bar\Y
     */
    private $m_y=null;

    /**
     * @var \foo\bar\Z
     */
    private $m_z=null;


    public function setFoo(\Foo $foo_)
    {

    }

    public function setBar(\Bar $bar_)
    {

    }

    public function setBaz(\Baz $baz_)
    {

    }


    /**
     * @return \SplObjectStorage
     * @throws \OutOfRangeException
     * @throws \InvalidArgumentException
     * @throws \ErrorException
     */
    public function process(Iterator $iterator_)
    {

    }

    // ...
  }]]>
    </example>
  </rule>
</ruleset>
